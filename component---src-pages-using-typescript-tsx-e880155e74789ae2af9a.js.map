{"version":3,"sources":["webpack:///./src/pages/using-typescript.tsx","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["UsingTypescript","data","path","location","title","site","buildTime","href","to","query","Layout","header","children","isRootPath","__PATH_PREFIX__","pathname","className","data-is-root-path","Date","getFullYear","SEO","description","lang","meta","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps"],"mappings":"6FAAA,0GA6CeA,UAhCyC,SAAC,GAAD,IACtDC,EADsD,EACtDA,KACAC,EAFsD,EAEtDA,KACAC,EAHsD,EAGtDA,SAHsD,OAKtD,kBAAC,IAAD,CAAQC,MAAM,mBAAmBD,SAAUA,GACzC,kBAAC,IAAD,CAAKC,MAAM,qBACX,sEACA,uEAC2C,wCAD3C,+DAE8C,2CAF9C,wEAKA,uEAC2C,0CAD3C,oBAEM,0CAFN,gBAEsC,yCAFtC,UAIA,6DACiCF,EADjC,uBAC2D,IACxDD,EAAKI,KAAKC,UAFb,KAIA,6DACkC,IAChC,uBAAGC,KAAK,6CAAR,kCAFF,KAOA,kBAAC,OAAD,CAAMC,GAAG,KAAT,6BAMG,IAAMC,EAAQ,c,kCC/CrB,qCAmCeC,IAhCA,SAAC,GAAmC,IAG7CC,EAHYR,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOQ,EAAe,EAAfA,SAE3BC,EADcC,qBACDX,EAASY,SAiB5B,OAbEJ,EADEE,EAEA,wBAAIG,UAAU,gBACZ,kBAAC,OAAD,CAAMR,GAAG,KAAKJ,IAKhB,kBAAC,OAAD,CAAMY,UAAU,mBAAmBR,GAAG,KACnCJ,GAML,yBAAKY,UAAU,iBAAiBC,oBAAmBJ,GACjD,4BAAQG,UAAU,iBAAiBL,GACnC,8BAAOC,GACP,sCACK,IAAIM,MAAOC,cADhB,mBAGE,uBAAGZ,KAAK,4BAAR,c,kCC7BR,iDAYMa,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMnB,EAAY,EAAZA,MAC9BC,EAASmB,yBAAe,cAAxBnB,KAgBFoB,EAAkBJ,GAAehB,EAAKqB,aAAaL,YACnDM,EAAY,UAAGtB,EAAKqB,oBAAR,aAAG,EAAmBtB,MAExC,OACE,kBAAC,SAAD,CACEwB,eAAgB,CACdN,QAEFlB,MAAOA,EACPyB,cAAeF,EAAY,QAAWA,EAAiB,KACvDJ,KAAM,CACJ,CACEO,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAAS3B,GAEX,CACE4B,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAA1B,EAAKqB,oBAAL,mBAAmBO,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAK,gBACLC,QAAS3B,GAEX,CACE0B,KAAK,sBACLC,QAASN,IAEXU,OAAOZ,MAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-pages-using-typescript-tsx-e880155e74789ae2af9a.js","sourcesContent":["// If you don't want to use TypeScript you can delete this file!\r\nimport React from \"react\"\r\nimport { PageProps, Link, graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\n\r\ntype DataProps = {\r\n  site: {\r\n    buildTime: string\r\n  }\r\n}\r\n\r\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\r\n  data,\r\n  path,\r\n  location,\r\n}) => (\r\n  <Layout title=\"Using TypeScript\" location={location}>\r\n    <SEO title=\"Using TypeScript\" />\r\n    <h1>Gatsby supports TypeScript by default!</h1>\r\n    <p>\r\n      This means that you can create and write <em>.ts/.tsx</em> files for your\r\n      pages, components etc. Please note that the <em>gatsby-*.js</em> files\r\n      (like gatsby-node.js) currently don't support TypeScript yet.\r\n    </p>\r\n    <p>\r\n      For type checking you'll want to install <em>typescript</em> via npm and\r\n      run <em>tsc --init</em> to create a <em>.tsconfig</em> file.\r\n    </p>\r\n    <p>\r\n      You're currently on the page \"{path}\" which was built on{\" \"}\r\n      {data.site.buildTime}.\r\n    </p>\r\n    <p>\r\n      To learn more, head over to our{\" \"}\r\n      <a href=\"https://www.gatsbyjs.com/docs/typescript/\">\r\n        documentation about TypeScript\r\n      </a>\r\n      .\r\n    </p>\r\n    <Link to=\"/\">Go back to the homepage</Link>\r\n  </Layout>\r\n)\r\n\r\nexport default UsingTypescript\r\n\r\nexport const query = graphql`\r\n  {\r\n    site {\r\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\r\n    }\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nconst Layout = ({ location, title, children }) => {\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n  let header\r\n\r\n  if (isRootPath) {\r\n    header = (\r\n      <h1 className=\"main-heading\">\r\n        <Link to=\"/\">{title}</Link>\r\n      </h1>\r\n    )\r\n  } else {\r\n    header = (\r\n      <Link className=\"header-link-home\" to=\"/\">\r\n        {title}\r\n      </Link>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\r\n      <header className=\"global-header\">{header}</header>\r\n      <main>{children}</main>\r\n      <footer>\r\n        Â© {new Date().getFullYear()}, Built with\r\n        {` `}\r\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst SEO = ({ description, lang, meta, title }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata?.social?.twitter || ``,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n"],"sourceRoot":""}